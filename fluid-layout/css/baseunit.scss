@use "sass:math";

$min-width: 400;
$max-width: 1600;


/**
 * Makes a unit-based variable unitless
 * @param {number (with units)} $value      The variable that should be converted to unitless
 */
@function makeUnitless($value) {
    @return math.div($value, $value * 0 + 1);
}


/**
 * Converts a variable (either px, unitless or rem) to a pixel based value. Assumes that 1rem
 * corresponds to 16px.
 * @param {number} $value      The variable that should be converted pixels
 */
@function toPixels($value) {
    $unit: unit($value);
    @if (unit == "") {
        @return $value * 1px;
    }
    @else if ($unit == 'px') {
        @return $value;
    }
    @else if ($unit == 'rem') {
        @return makeUnitless($value) * 16px;
    }
    @else {
        @warn 'Cannot convert "#{$unit}" to pixels';
    }
}


/**
 * Creates a variable that represents a fluid value; it grows from $minPropertyValue to
 * $maxPropertyValue while the viewport width is between $minWidth and $maxWidth.
 * Return value always uses the same unit as $min/maxPropertyValue and adds pixel based value
 * depending on screen size. 
 * Use rem units for $min/maxPropertyValue for fonts (for accessibility reasons; users can
 * thereby chose their default font size in the OS/browser) and px for layouts.
 * @param {number (px/rem)} $minPropertyValue       Fluid value will correspond to this value if
 *                                                  the viewport has $minWidth and will not fall
 *                                                  below this value
 * @param {number (px/rem)} $maxPropertyValue       Fluid value will correspond to this value if
 *                                                  the viewport has $maxWidth and will go above
 *                                                  this value
 * @param {number (px)} $minWidth                   Fluid value will be $minPropertyValue if the
 *                                                  viewport has this size or is smaller
 * @param {number (px)} $maxWidth                   Fluid value will be $maxPropertyValue if the
 *                                                  viewport has this size or is larger
 */ 
@function fluidify($minPropertyValue, $maxPropertyValue, $minWidth: $min-width, $maxWidth: $max-width) {

    $propertyDifference: $maxPropertyValue - $minPropertyValue;
    // Convert propertyDifference to pixels to ensure that the fluid value grows accordingly;
    // if $min/maxPropertyValue are rem based, fluid value would grow too slow by factor 16 if we
    // did not convert it to pixels.
    $propertyDifferenceInPx: toPixels($propertyDifference);
    // Use unitless value to get a scaleFactor that is not unit-based
    $widthDifferenceUnitless: makeUnitless($maxWidth - $minWidth);
    // scaleFactor must be unitless, therefore divide by $minPropertyValue * 0 + 1 which equals
    // one in $minPropertyValue's value
    $scaleFactor: math.div(makeUnitless($propertyDifferenceInPx), $widthDifferenceUnitless);
    // Current screen width that goes over 
    $additionalWidth: calc(100vw - #{$minWidth});
    // Do the magic
    $baseUnitWithoutLimits: calc(#{$minPropertyValue} + #{$scaleFactor} * #{$additionalWidth});
    // Clamp base unit to min/maxPropertyValue
    $baseUnit: min(#{$maxPropertyValue}, max(#{$minPropertyValue}, #{$baseUnitWithoutLimits}));
    @return $baseUnit;

}

/**
 * Returns the layout fluid base unit multiplied with the factor provided
 * @param {number} $factor      Factor that the layout's fluid base unit should be multiplied with
 */
@function fluid($factor: 1) {
    $base: fluidify(16px, 24px);
    @return calc(#{$base} * #{$factor});
}

